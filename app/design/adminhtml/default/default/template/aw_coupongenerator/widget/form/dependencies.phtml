<?php
/**
 * aheadWorks Co.
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the EULA
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://ecommerce.aheadworks.com/AW-LICENSE.txt
 *
 * =================================================================
 *                 MAGENTO EDITION USAGE NOTICE
 * =================================================================
 * This software is designed to work with Magento community edition and
 * its use on an edition other than specified is prohibited. aheadWorks does not
 * provide extension support in case of incorrect edition use.
 * =================================================================
 *
 * @category   AW
 * @package    AW_Coupongenerator
 * @version    1.0.2
 * @copyright  Copyright (c) 2010-2012 aheadWorks Co. (http://www.aheadworks.com)
 * @license    http://ecommerce.aheadworks.com/AW-LICENSE.txt
 */
?><script type="text/javascript">
    /**
     * Observer that watches for dependent form elements
     * If an element depends on 1 or more of other elements, it should show up only when all of them gain specified values
     */
    AWFormElementDependenceController = Class.create();
    AWFormElementDependenceController.prototype = {
        /**
         * Structure of elements: {
         *     'id_of_dependent_element' : {
         *         'id_of_master_element_1' : 'reference_value',
         *         'id_of_master_element_2' : 'reference_value'
         *         'id_of_master_element_3' : ['reference_value1', 'reference_value2']
         *         ...
         *     }
         * }
         * @param object elementsMap
         * @param object config
         */
        initialize : function (elementsMap, config)
        {
            if (config) {
                this._config = config;
            }
            for (var idTo in elementsMap) {
                for (var idFrom in elementsMap[idTo]) {
                    if ($(idFrom)) {
                        Event.observe($(idFrom), 'change', this.trackChange.bindAsEventListener(this, idTo, elementsMap[idTo]));
                        this.trackChange(null, idTo, elementsMap[idTo]);
                    } else {
                        this.trackChange(null, idTo, elementsMap[idTo]);
                    }
                }
            }
        },

        /**
         * Misc. config options
         * Keys are underscored intentionally
         */
        _config : {
            levels_up : 1 // how many levels up to travel when toggling element
        },

        /**
         * Define whether target element should be toggled and show/hide its row
         *
         * @param object e - event
         * @param string idTo - id of target element
         * @param valuesFrom - ids of master elements and reference values
         * @return
         */
        trackChange : function(e, idTo, valuesFrom)
        {
            // define whether the target should show up
            var shouldShowUp = true;
            for (var idFrom in valuesFrom) {
                var from = $(idFrom);
                if (valuesFrom[idFrom] instanceof Array) {
                    if (!from || valuesFrom[idFrom].indexOf(from.value) == -1) {
                        shouldShowUp = false;
                    }
                } else {
                    if (!from || from.value != valuesFrom[idFrom]) {
                        shouldShowUp = false;
                    }
                }
            }

            // toggle target row
            if (shouldShowUp) {
                var currentConfig = this._config;
                $(idTo).up(this._config.levels_up).select('input', 'select', 'td').each(function (item) {
                    // don't touch hidden inputs (and Use Default inputs too), bc they may have custom logic
                    if ((!item.type || item.type != 'hidden') && !($(item.id+'_inherit') && $(item.id+'_inherit').checked)
                        && !(currentConfig.can_edit_price != undefined && !currentConfig.can_edit_price)) {
                        item.disabled = false;
                    }
                });
                $(idTo).up(this._config.levels_up).show();
            } else {
                $(idTo).up(this._config.levels_up).select('input', 'select', 'td').each(function (item){
                    // don't touch hidden inputs (and Use Default inputs too), bc they may have custom logic
                    if ((!item.type || item.type != 'hidden') && !($(item.id+'_inherit') && $(item.id+'_inherit').checked)) {
                        item.disabled = true;
                    }
                });
                $(idTo).up(this._config.levels_up).hide();
            }
        }
    }
</script>
<?php echo $this->getChildHtml('native_dependence');?>
